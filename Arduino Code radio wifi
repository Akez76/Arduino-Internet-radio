# 1.Radio_peredatchik

#include <RadioHead.h>
#include <RHCRC.h>
#include <RHDatagram.h>
#include <RHEncryptedDriver.h>
#include <RHGenericDriver.h>
#include <RHGenericSPI.h>
#include <RHHardwareSPI.h>
#include <RHMesh.h>
#include <RHNRFSPIDriver.h>
#include <RHReliableDatagram.h>
#include <RHRouter.h>
#include <RHSoftwareSPI.h>
#include <RHSPIDriver.h>
#include <RHTcpProtocol.h>
#include <RH_ASK.h>
#include <RH_CC110.h>
#include <RH_E32.h>
#include <RH_MRF89.h>
#include <RH_NRF24.h>
#include <RH_NRF51.h>
#include <RH_NRF905.h>
#include <RH_RF22.h>
#include <RH_RF24.h>
#include <RH_RF69.h>
#include <RH_RF95.h>
#include <RH_Serial.h>
#include <RH_TCP.h>

#include <RH_ASK.h>                              // Connecting library RadioHead 
#include <SPI.h>                                 // Connecting library SPI 
 
// Arduino                     Transmitter
//  GND--------------------------GND
//  D12--------------------------Data
//  5V---------------------------VCC

RH_ASK driver(2000, 11, 12);

void setup() {
  Serial.begin(9600);   
  if (!driver.init()) Serial.println("init failed");
}

void loop() {
  const char *msg = "hello";
  driver.send((uint8_t *)msg, strlen(msg));
  driver.waitPacketSent();
  delay(200);
}

# 2.Radio_priemnik

#include <RadioHead.h>
#include <RHCRC.h>
#include <RHDatagram.h>
#include <RHEncryptedDriver.h>
#include <RHGenericDriver.h>
#include <RHGenericSPI.h>
#include <RHHardwareSPI.h>
#include <RHMesh.h>
#include <RHNRFSPIDriver.h>
#include <RHReliableDatagram.h>
#include <RHRouter.h>
#include <RHSoftwareSPI.h>
#include <RHSPIDriver.h>
#include <RHTcpProtocol.h>
#include <RH_ASK.h>
#include <RH_CC110.h>
#include <RH_E32.h>
#include <RH_MRF89.h>
#include <RH_NRF24.h>
#include <RH_NRF51.h>
#include <RH_NRF905.h>
#include <RH_RF22.h>
#include <RH_RF24.h>
#include <RH_RF69.h>
#include <RH_RF95.h>
#include <RH_Serial.h>
#include <RH_TCP.h>


#include <RH_ASK.h>                              // Connecting library RadioHead 
#include <SPI.h>                                 // Connecting library SPI 

RH_ASK rf_driver;                                // Create object "RH_ASK" for working with library RadioHead

void setup()
{
  rf_driver.init();                            // Initialization RadioHead.
  Serial.begin(9600);                          // Configuring serial communication
  pinMode(9, OUTPUT);
}

void loop()
{
  uint8_t buf[15];                            // Creating a buffer for the message
  uint8_t buflen = sizeof(buf);
  if (rf_driver.recv(buf, &buflen))           // Turning on the radio module and reading the message
  {
    String buff = String((char*)buf);
    Serial.print("Message Received: ");       // Printing the text
    Serial.println (buff);               // Printing the received message
    if (buff == "On") {
      digitalWrite(9, HIGH);
    }
    else if (buff == "Off") {
      digitalWrite(9, LOW);
    }
  }
}
